import { View, Text, StyleSheet, TouchableOpacity, Alert, ScrollView } from 'react-native';
import { useState } from 'react';
import { LinearGradient } from 'expo-linear-gradient';
import { CheckCircle, XCircle, AlertCircle } from 'lucide-react-native';
import { router } from 'expo-router';
import { driverApplicationService } from '../services/driver-application';
import { getSupabaseClient } from '../services/supabase';

export default function TestDriverRegistrationScreen() {
  const [testResults, setTestResults] = useState<any[]>([]);
  const [testing, setTesting] = useState(false);

  const addResult = (name: string, status: 'success' | 'error' | 'info', message: string) => {
    setTestResults(prev => [...prev, { name, status, message, time: new Date().toLocaleTimeString() }]);
  };

  const runTests = async () => {
    setTesting(true);
    setTestResults([]);

    console.log('='.repeat(50));
    console.log('ÈñãÂßãÊ∏¨Ë©¶Âè∏Ê©üË®ªÂÜäÊµÅÁ®ã');
    console.log('='.repeat(50));

    // Ê∏¨Ë©¶ 1: Ê™¢Êü• Supabase ÈÄ£Êé•
    addResult('Supabase ÈÄ£Êé•', 'info', 'Ê™¢Êü•‰∏≠...');
    try {
      const client = getSupabaseClient();
      if (client) {
        addResult('Supabase ÈÄ£Êé•', 'success', 'Â∑≤ÈÄ£Êé•');
        console.log('‚úÖ Supabase ÂÆ¢Êà∂Á´ØÂ∑≤ÈÄ£Êé•');
      } else {
        addResult('Supabase ÈÄ£Êé•', 'error', 'Êú™ÈÄ£Êé•(Â∞á‰ΩøÁî®ÊºîÁ§∫Ê®°Âºè)');
        console.log('‚ùå Supabase ÂÆ¢Êà∂Á´ØÊú™ÈÄ£Êé•');
      }
    } catch (error) {
      addResult('Supabase ÈÄ£Êé•', 'error', error.message);
      console.error('‚ùå Supabase ÈÄ£Êé•ÈåØË™§:', error);
    }

    // Ê∏¨Ë©¶ 2: Ê∏¨Ë©¶Ë≥áÊñôÂ∫´Êü•Ë©¢
    addResult('Ë≥áÊñôÂ∫´Êü•Ë©¢', 'info', 'Ê∏¨Ë©¶‰∏≠...');
    try {
      const client = getSupabaseClient();
      if (client) {
        const { data, error } = await client
          .from('users')
          .select('count')
          .limit(1);

        if (error) {
          addResult('Ë≥áÊñôÂ∫´Êü•Ë©¢', 'error', `Êü•Ë©¢Â§±Êïó: ${error.message}`);
          console.error('‚ùå Ë≥áÊñôÂ∫´Êü•Ë©¢ÈåØË™§:', error);
        } else {
          addResult('Ë≥áÊñôÂ∫´Êü•Ë©¢', 'success', 'Êü•Ë©¢ÊàêÂäü');
          console.log('‚úÖ Ë≥áÊñôÂ∫´Êü•Ë©¢ÊàêÂäü');
        }
      } else {
        addResult('Ë≥áÊñôÂ∫´Êü•Ë©¢', 'info', 'Ë∑≥ÈÅé(ÊºîÁ§∫Ê®°Âºè)');
      }
    } catch (error) {
      addResult('Ë≥áÊñôÂ∫´Êü•Ë©¢', 'error', error.message);
      console.error('‚ùå Ë≥áÊñôÂ∫´Êü•Ë©¢ÈåØË™§:', error);
    }

    // Ê∏¨Ë©¶ 3: Êèê‰∫§Ê∏¨Ë©¶Ë®ªÂÜä
    addResult('Êèê‰∫§Ë®ªÂÜä', 'info', 'Ê∏¨Ë©¶‰∏≠...');
    const testData = {
      full_name: 'Ê∏¨Ë©¶Âè∏Ê©ü_' + Date.now().toString().slice(-4),
      phone_number: '0900' + Date.now().toString().slice(-6),
      id_number: 'A123456789',
      password: 'test123456',
      license_number: 'TEST' + Date.now().toString().slice(-6),
      license_expiry: '2030-12-31',
      vehicle_brand: 'Toyota',
      vehicle_model: 'Prius',
      vehicle_plate: 'TEST-' + Date.now().toString().slice(-4),
      vehicle_year: '2020',
      vehicle_color: 'ÁôΩËâ≤',
      emergency_contact_name: 'Ê∏¨Ë©¶ËÅØÁµ°‰∫∫',
      emergency_contact_phone: '0912345678',
      emergency_contact_relation: 'ÂÆ∂‰∫∫',
      jkopay_account: '0900000000',
      jkopay_name: 'Ê∏¨Ë©¶Âè∏Ê©ü'
    };

    console.log('üìù Ê∏¨Ë©¶Ë≥áÊñô:', testData);

    try {
      const result = await driverApplicationService.submitDriverApplication(testData);

      if (result.success) {
        addResult('Êèê‰∫§Ë®ªÂÜä', 'success', `Áî≥Ë´ãÂ∑≤Êèê‰∫§! ID: ${result.data?.id?.slice(-6) || 'N/A'}`);
        console.log('‚úÖ Ë®ªÂÜäÊàêÂäü:', result);

        Alert.alert(
          '‚úÖ Ê∏¨Ë©¶ÊàêÂäü!',
          `Ë®ªÂÜäÁî≥Ë´ãÂ∑≤ÊàêÂäüÊèê‰∫§!\n\nÁî≥Ë´ãID: ${result.data?.id?.slice(-6) || 'N/A'}\nÁãÄÊÖã: ${result.data?.status || 'pending'}\n\n${result.message || ''}`,
          [{ text: 'Á¢∫ÂÆö' }]
        );
      } else {
        addResult('Êèê‰∫§Ë®ªÂÜä', 'error', result.error || 'Êú™Áü•ÈåØË™§');
        console.error('‚ùå Ë®ªÂÜäÂ§±Êïó:', result);

        Alert.alert(
          '‚ùå Ê∏¨Ë©¶Â§±Êïó',
          `ÈåØË™§Ë®äÊÅØ:\n${result.error}\n\nË´ãÊü•ÁúãÊéßÂà∂Âè∞Êó•Ë™åÁç≤ÂèñÊõ¥Â§öË©≥ÊÉÖ„ÄÇ`,
          [{ text: 'Á¢∫ÂÆö' }]
        );
      }
    } catch (error) {
      addResult('Êèê‰∫§Ë®ªÂÜä', 'error', error.message);
      console.error('‚ùå Ë®ªÂÜäÈåØË™§:', error);

      Alert.alert(
        '‚ùå Ê∏¨Ë©¶Áï∞Â∏∏',
        `ÊçïÁç≤Âà∞Áï∞Â∏∏:\n${error.message}\n\nË´ãÊü•ÁúãÊéßÂà∂Âè∞Êó•Ë™åÁç≤ÂèñÊõ¥Â§öË©≥ÊÉÖ„ÄÇ`,
        [{ text: 'Á¢∫ÂÆö' }]
      );
    }

    setTesting(false);
    console.log('='.repeat(50));
    console.log('Ê∏¨Ë©¶ÂÆåÊàê');
    console.log('='.repeat(50));
  };

  const getIcon = (status: string) => {
    switch (status) {
      case 'success':
        return <CheckCircle size={20} color="#4ade80" />;
      case 'error':
        return <XCircle size={20} color="#f87171" />;
      default:
        return <AlertCircle size={20} color="#fbbf24" />;
    }
  };

  return (
    <LinearGradient
      colors={['#000000', '#1a1a1a', '#333333']}
      style={styles.container}
    >
      <View style={styles.header}>
        <Text style={styles.title}>Ë®ªÂÜäÊµÅÁ®ãÊ∏¨Ë©¶</Text>
        <Text style={styles.subtitle}>Ê∏¨Ë©¶Âè∏Ê©üË®ªÂÜäÂäüËÉΩ</Text>
      </View>

      <ScrollView style={styles.resultsContainer}>
        {testResults.map((result, index) => (
          <View key={index} style={styles.resultItem}>
            <View style={styles.resultHeader}>
              {getIcon(result.status)}
              <Text style={styles.resultName}>{result.name}</Text>
              <Text style={styles.resultTime}>{result.time}</Text>
            </View>
            <Text style={[
              styles.resultMessage,
              result.status === 'success' && styles.successText,
              result.status === 'error' && styles.errorText
            ]}>
              {result.message}
            </Text>
          </View>
        ))}
      </ScrollView>

      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={[styles.testButton, testing && styles.testButtonDisabled]}
          onPress={runTests}
          disabled={testing}
        >
          <Text style={styles.testButtonText}>
            {testing ? 'Ê∏¨Ë©¶‰∏≠...' : 'ÈñãÂßãÊ∏¨Ë©¶'}
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Text style={styles.backButtonText}>ËøîÂõû</Text>
        </TouchableOpacity>
      </View>
    </LinearGradient>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    paddingTop: 60,
  },
  header: {
    marginBottom: 30,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#FFD700',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#ccc',
  },
  resultsContainer: {
    flex: 1,
    marginBottom: 20,
  },
  resultItem: {
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: 'rgba(255, 215, 0, 0.2)',
  },
  resultHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  resultName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#fff',
    marginLeft: 8,
    flex: 1,
  },
  resultTime: {
    fontSize: 12,
    color: '#999',
  },
  resultMessage: {
    fontSize: 14,
    color: '#ccc',
    marginLeft: 28,
  },
  successText: {
    color: '#4ade80',
  },
  errorText: {
    color: '#f87171',
  },
  buttonContainer: {
    gap: 12,
  },
  testButton: {
    backgroundColor: '#FFD700',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
  },
  testButtonDisabled: {
    backgroundColor: '#666',
  },
  testButtonText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#000',
  },
  backButton: {
    borderWidth: 1,
    borderColor: '#FFD700',
    borderRadius: 12,
    paddingVertical: 12,
    alignItems: 'center',
  },
  backButtonText: {
    fontSize: 16,
    color: '#FFD700',
    fontWeight: '600',
  },
});
